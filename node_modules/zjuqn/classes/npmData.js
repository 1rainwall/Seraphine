const Discord = require('discord.js')
const {zJuqnError} = require('../Util/zJuqnError')
   /**
   * @param {Discord.Message} options.message
   * @param {Discord.ColorResolvable} options.color 
   * @param {String} options.npm 
  */

  class npmData {

   constructor(options) {
    if (!options.color) throw new zJuqnError('[ERROR] => Error: Falta el color en el argumento de la función de npmData.')
    if (typeof options.color !== 'string') throw new zJuqnError('[ERROR] => Error: ¡El color debe ser un String! en la función de npmData.')
    if (!options.npm) throw new zJuqnError('[ERROR] => Error: Falta el argumento npm en la funcion npmData')
    if (typeof options.npm !== 'string') throw new zJuqnError('[ERROR] => Error: ¡El nombre del npm debe ser un String! en la función de npmData.')
    if (!options.message) throw new zJuqnError('[ERROR] => Error: Falta el mensaje donde se enviara el embed')

    this.message = options.message
    this.color = options.color
    this.npm = options.npm

   }

   async fetch() {
    try {
        const packageData = await require('node-fetch')(`https://registry.npmjs.com/${encodeURIComponent(this.npm)}`).then(text => text.json())

        const embed = new Discord.MessageEmbed()

        .setColor(this.color)
        .addField("Author Name:", `${packageData['author'].name}.`)
        .addField("Ultima Version:", packageData['dist-tags'].latest, true)
        .addField("Package Name:", packageData.name, true)
        .addField("Lisencia:", `${packageData.license}.`, true)
        .addField("Keywords:", `${packageData.keywords.join(" ,")}.`)
        .addField("Package Creado el:", `${packageData['time'].created}.`)
        .addField("Descripcion:", packageData.description, true)


        return this.message.reply({embeds: [embed]}).catch()

    } catch(err) {
       this.message.reply({ embeds: [new Discord.MessageEmbed().setColor("RED").setDescription(":x: `|` No se encontraron resultados para el package que ingresate")]})
    }
   }
}

module.exports = npmData